name: Tests

on: push

env:
  FMP_REPOSITORY: https://github.com/fabric8io/fabric8-maven-plugin.git
  FMP_REVISION: master

jobs:
#  minikube:
#    name: Generic Test using Minikube
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        minikube: [v1.5.1]
#        kubernetes: [v1.16.2,v1.12.0]
#    env:
#      MINIKUBE_URL: https://github.com/kubernetes/minikube/releases/download/${{ matrix.minikube }}/minikube-linux-amd64
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Setup Java 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: '11'
#      - name: Checkout fabric8-maven-plugin
#        run: git clone "$FMP_REPOSITORY" && git checkout "$FMP_REVISION"
#      - name: Install fabric8-maven-plugin SNAPSHOT
#        run: mvn -f ./fabric8-maven-plugin -B -DskipTests clean install
##      - name: Cache Maven Dependencies
##        uses: actions/upload-artifact@master
##        with:
##          name: maven-dependencies
##          path: /home/runner/.m2
#      - name: Download latest Docker Version
#        run: |
#          sudo apt-get purge docker docker-engine docker.io containerd runc \
#          && sudo rm -rf /var/lib/docker \
#          && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \
#          && sudo add-apt-repository \
#                "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
#                $(lsb_release -cs) \
#                stable" \
#          && sudo apt-get update \
#          && sudo apt-get install docker-ce docker-ce-cli
#      - name: Download minikube
#        run: curl -Lo minikube "$MINIKUBE_URL" && chmod +x minikube
#      - name: Start minikube
#        run: |
#          sudo -E ./minikube start --vm-driver=none --kubernetes-version ${{ matrix.kubernetes }} \
#          && sudo chmod -R a+r /home/runner/.kube /home/runner/.minikube
#      - name: Hello World Test
#        run: mvn -B clean package fabric8:build fabric8:resource fabric8:apply
  minishift:
    name: Generic Test using Minikube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
#      - name: Setup Minishift
#        uses: manusa/actions-setup-minishift@master
#        with:
#          minishift version: 'v1.34.1'
#      - name: Virtualbox
#        run: |
#          curl -Lo vbox "https://download.virtualbox.org/virtualbox/6.0.14/VirtualBox-6.0.14-133895-Linux_amd64.run" \
#          && chmod +x vbox \
#          && sudo ./vbox
#      - name: KVM
#        run: |
#          sudo apt update \
#          && sudo apt install qemu-kvm libvirt-daemon libvirt-daemon-system \
#          && sudo usermod -a -G libvirt $(whoami) \
#          && newgrp libvirt \
#          && sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-ubuntu16.04 -o /usr/local/bin/docker-machine-driver-kvm \
#          && sudo chmod +x /usr/local/bin/docker-machine-driver-kvm \
#          && sudo systemctl start libvirtd \
#          && sudo virsh net-autostart default
#      - name: CHECK -DELETE-
#        run: |
#          sudo service libvirtd status
#      - name: Start Minishift
#        run:  minishift start --vm-driver virtualbox
#      - name: CHECK -DELETE-
#        run: minishift status
################ TEST DIFFERENT APPROACH
      - name: OC
        run: |
          export OC_VERSION=v3.9.0 \
          && curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \
          && chmod +x kubectl \
          && sudo mv kubectl /usr/local/bin/ \
          && export client_tools="openshift-origin-client-tools-${OC_VERSION}-${COMMIT_ID}-linux-64bit" \
          && curl -LO https://github.com/openshift/origin/releases/download/${OC_VERSION}/${client_tools}.tar.gz \
          && tar -xvzf ${client_tools}.tar.gz \
          && sudo mv $PWD/${client_tools}/oc /usr/local/bin/ \
          && rm -rf ${client_tools}.tar.gz \
          && oc cluster up --version=${OC_VERSION} --routing-suffix="127.0.0.1.${OC_DOMAIN:-nip.io}" \
          && oc login -u system:admin


